"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const clustering_column_1 = __importStar(require("../src/clustering-column"));
describe("Query Test Suite", () => {
    const personId = new src_1.UuidAttribute("id");
    const firstName = new src_1.TextAttribute("first_name");
    const lastName = new src_1.TextAttribute("last_name");
    const email = new src_1.TextAttribute("email");
    const personSchema = new src_1.Schema("person", {
        id: personId,
        firstName: firstName,
        lastName: lastName,
        email: email
    });
    const queryById = src_1.Table.from(personSchema).by(personId).orderBy([new clustering_column_1.default({ name: email.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    const queryByEmail = src_1.Table.from(personSchema)
        .by(email);
    const queryByfirstNameLastName = src_1.Table.from(personSchema)
        .by([firstName, lastName])
        .orderBy([new clustering_column_1.default({ name: email.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    it("Should find the correct query to execute - integration", async () => {
        const get = personSchema
            .get(["name", "id"])
            .where("id")
            .equals("123")
            .and("email")
            .equals("test@test.com");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT name, id FROM person_by_id WHERE id = ? AND email = ?;");
        expect(params).toStrictEqual(["123", "test@test.com"]);
    });
    it("Should find the correct query to execute - integration", async () => {
        const get = personSchema
            .get(["name", "id"])
            .where("email")
            .equals("test@test.com");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT name, id FROM person_by_email WHERE email = ?;");
        expect(params).toStrictEqual(["test@test.com"]);
    });
    it("Should find the correct query to execute - integration", async () => {
        const get = personSchema
            .get(["name", "id"])
            .where("first_name")
            .equals("test")
            .and("last_name")
            .equals("test");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT name, id FROM person_by_first_name_last_name WHERE first_name = ? AND last_name = ?;");
        expect(params).toStrictEqual(["test", "test"]);
    });
    it("Should create a query with the correct clustering columns", async () => {
        const get = personSchema
            .get()
            .where("id")
            .equals("123")
            .and("email")
            .equals("test@test.com");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT * FROM person_by_id WHERE id = ? AND email = ?;");
        expect(params).toStrictEqual(["123", "test@test.com"]);
    });
    it("Should create a query with the correct clustering columns", async () => {
        const get = queryById
            .get()
            .where("id")
            .equals("123")
            .and("email")
            .equals("test@test.com");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT * FROM person_by_id WHERE id = ? AND email = ?;");
        expect(params).toStrictEqual(["123", "test@test.com"]);
    });
    it("Should create a query with the correct clustering columns", async () => {
        const get = queryByEmail
            .get()
            .where("email")
            .equals("test@test.com")
            .and("id")
            .equals("123");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT * FROM person_by_email WHERE email = ? AND id = ?;");
        expect(params).toStrictEqual(["test@test.com", "123"]);
    });
    it("Should create a query with the correct clustering columns", async () => {
        const get = queryByfirstNameLastName
            .get()
            .where("first_name")
            .equals("test")
            .where("last_name")
            .equals("test")
            .and("email")
            .isGreaterThan("test");
        const { query, params } = get.getQuery();
        expect(query).toBe("SELECT * FROM person_by_first_name_last_name WHERE first_name = ? AND last_name = ? AND email > ?;");
        expect(params).toStrictEqual(["test", "test", "test"]);
    });
});
