"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const select_1 = require("../src/cql-generators/select");
describe("Select Table Generator", () => {
    const personId = new src_1.UuidAttribute("id");
    const firstName = new src_1.TextAttribute("first_name");
    const lastName = new src_1.TextAttribute("last_name");
    const email = new src_1.TextAttribute("email");
    const personSchema = new src_1.Schema("person", {
        id: personId,
        firstName: firstName,
        lastName: lastName,
        email: email
    });
    const queryByEmail = src_1.Table.from(personSchema).by(email);
    it("should just merge the entries", () => {
        expect(select_1.generateAttributes(["id", "name"])).toBe("id, name");
    });
    it("should just merge the entries", () => {
        expect(select_1.stringFromAttributes(["id", "name"])).toBe(select_1.generateAttributes(["id", "name"]));
    });
    it("should return all", () => {
        expect(select_1.stringFromAttributes()).toBe("*");
    });
    it("Should generate a standard SELECT Table", () => {
        const { query, params } = select_1.generateSelectQuery({ table: queryByEmail });
        expect(query).toBe("SELECT * FROM person_by_email;");
        expect(params).toStrictEqual([]);
    });
    it("Should create a standard select statement with variables.", () => {
        const { query, params } = select_1.generateSelectQuery({ table: queryByEmail, attributes: ["id", "first_name"] });
        expect(query).toBe("SELECT id, first_name FROM person_by_email;");
        expect(params).toStrictEqual([]);
    });
    it("Should create a standard select statement with variables and a where clause.", () => {
        const { query, params } = select_1.generateSelectQuery({
            table: queryByEmail, attributes: ["id", "first_name"], constraints: [
                { subject: "id", value: "123" }
            ]
        });
        expect(query).toBe("SELECT id, first_name FROM person_by_email WHERE id = ?;");
        expect(params).toStrictEqual(["123"]);
    });
    it("Should create a multi-constraint where clause.", () => {
        const { query, params } = select_1.generateSelectQuery({
            table: queryByEmail, attributes: ["id", "first_name"], constraints: [
                { subject: "id", value: "123" },
                { subject: "first_name", operator: "=", value: "test" }
            ]
        });
        expect(query).toBe("SELECT id, first_name FROM person_by_email WHERE id = ? AND first_name = ?;");
        expect(params).toStrictEqual(["123", "test"]);
    });
    it("Should create a multi-constraint where clause.", () => {
        const { query, params } = select_1.generateSelectQuery({
            table: queryByEmail, attributes: ["id", "first_name"], constraints: [
                { subject: "id", value: "123" },
                { subject: "first_name", operator: "=", value: "test" },
                { subject: "age", operator: ">", value: "18" }
            ]
        });
        expect(query).toBe("SELECT id, first_name FROM person_by_email WHERE id = ? AND first_name = ? AND age > ?;");
        expect(params).toStrictEqual(["123", "test", "18"]);
    });
    it("Should create a standard where clause.", () => {
        const { query, params } = select_1.whereStatement([{ subject: "id", value: "123" }
        ]);
        expect(query).toBe(" WHERE id = ?");
        expect(params).toStrictEqual(["123"]);
    });
});
