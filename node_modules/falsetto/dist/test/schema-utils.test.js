"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const clustering_column_1 = __importStar(require("../src/clustering-column"));
const errors_1 = require("../src/errors");
const schema_utils_1 = require("../src/schema-utils");
describe("Schema Utils Test Suite", () => {
    const personId = new src_1.UuidAttribute("id");
    const firstName = new src_1.TextAttribute("first_name");
    const lastName = new src_1.TextAttribute("last_name");
    const email = new src_1.TextAttribute("email");
    const personSchema = new src_1.Schema("person", {
        id: personId,
        firstName: firstName,
        lastName: lastName,
        email: email
    });
    const personSchema2 = new src_1.Schema("person2", {
        id: personId,
        firstName: firstName,
        lastName: lastName,
        email: email
    });
    const queryById = src_1.Table.from(personSchema).by(personId).orderBy([new clustering_column_1.default({ name: email.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    const queryByIdOrderByFirstName = src_1.Table.from(personSchema).by(personId).orderBy([new clustering_column_1.default({ name: firstName.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    const queryByEmail = src_1.Table.from(personSchema)
        .by(email)
        .orderBy([new clustering_column_1.default({ name: firstName.name, direction: clustering_column_1.ClusteringDirection.desc }), new clustering_column_1.default({ name: lastName.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    const queryByfirstNameLastName = src_1.Table.from(personSchema)
        .by([firstName, lastName])
        .orderBy([new clustering_column_1.default({ name: email.name, direction: clustering_column_1.ClusteringDirection.asc })]);
    /** First, test the ability to find the best fit table from a list of tables.
     *
     */
    it("should select the correct table from a clustering column.", () => {
        const result = schema_utils_1.getBestFitTable([queryByEmail, queryById, queryByfirstNameLastName], ["first_name", "last_name"]);
        expect(result.clusteringColumns).toStrictEqual(queryByEmail.clusteringColumns);
    });
    it("should sekect the correct table based on the email clustering column", () => {
        const result = schema_utils_1.getBestFitTable([queryByEmail, queryById, queryByfirstNameLastName], ["email"]);
        expect(result.clusteringColumns).toStrictEqual(queryByfirstNameLastName.clusteringColumns);
    });
    /** Testing "partitionDoesMatch"
     *
     */
    it("ensure that a partition by a email matches a list of partition keys ", () => {
        expect(schema_utils_1.partitionDoesMatch(["email"])(queryByEmail)).toBe(true);
        expect(schema_utils_1.partitionDoesMatch(["email"])(queryById)).toBe(false);
    });
    it("ensure that a partition by a email matches a list of partition keys ", () => {
        expect(schema_utils_1.partitionDoesMatch(["first_name", "last_name"])(queryByfirstNameLastName)).toBe(true);
        expect(schema_utils_1.partitionDoesMatch(["first_name", "last_name"])(queryById)).toBe(false);
    });
    it("ensure that a partition by a email matches a list of partition keys ", () => {
        expect(schema_utils_1.partitionDoesMatch(["id"])(queryById)).toBe(true);
        expect(schema_utils_1.partitionDoesMatch(["id"])(queryByEmail)).toBe(false);
    });
    /** Test Get point.
     *
     */
    it("Test a correct and an incorrect point", () => {
        expect(schema_utils_1.getPoint(["id"])(new clustering_column_1.default({ name: personId.name, direction: clustering_column_1.ClusteringDirection.asc }))).toBe(1);
        expect(schema_utils_1.getPoint(["id"])(new clustering_column_1.default({ name: email.name, direction: clustering_column_1.ClusteringDirection.asc }))).toBe(0);
    });
    /** Get Table From Schema
     *
     */
    it("Should get the correct table schema id partition keys based on the given key structure.", () => {
        expect(schema_utils_1.getTableFromSchema(["id"], [], personSchema)?.partitionKey).toBe(queryById.partitionKey);
    });
    it("Should get the correct table schema partition keys based on the given key structure.", () => {
        expect(schema_utils_1.getTableFromSchema(["first_name", "last_name"], [], personSchema)?.partitionKey).toBe(queryByfirstNameLastName.partitionKey);
    });
    it("Should get the correct table schema partition keys based on the given key structure.", () => {
        expect(schema_utils_1.getTableFromSchema(["email"], [], personSchema)?.partitionKey).toBe(queryByEmail.partitionKey);
    });
    it("Should get the correct table schema partition keys based on the given key structure.", () => {
        const table = schema_utils_1.getTableFromSchema(["id"], ["first_name"], personSchema);
        expect(table?.partitionKey).toBe(queryByIdOrderByFirstName.partitionKey);
        expect(table?.clusteringColumns).toBe(queryByIdOrderByFirstName.clusteringColumns);
    });
    it("Should check that the table returns no viable tables.", () => {
        expect(() => {
            schema_utils_1.getTableFromSchema(["id"], ["first_name"], personSchema2);
        }).toThrowError(errors_1.NoViableTablesError);
    });
});
