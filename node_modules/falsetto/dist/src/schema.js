"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTableFromSchema = void 0;
const single_executable_1 = __importDefault(require("./executables/single-executable"));
const create_table_1 = require("./cql-generators/create-table");
const multi_executable_1 = __importDefault(require("./executables/multi-executable"));
const insert_into_1 = require("./cql-generators/insert-into");
const batch_executable_1 = __importDefault(require("./executables/batch-executable"));
const query_1 = __importDefault(require("./query"));
/** Function to retrieve the first-most query that
 * can support the schema.
 *
 * @param keys - keys the query uses.
 * @param schema - the schema given
 */
const getTableFromSchema = (keys, schema) => {
};
exports.getTableFromSchema = getTableFromSchema;
class Schema {
    constructor(name, attributes) {
        this.tables = [];
        this.name = name;
        this.attributes = attributes;
    }
    addTable(query) {
        this.tables.push(query);
        return this;
    }
    createTables() {
        //TODO: I am sure this is not the way I want to do this.
        const executables = this.tables
            .map(create_table_1.createTable)
            .map(statement => new single_executable_1.default(statement, []));
        return new multi_executable_1.default(executables);
    }
    get(attributes) {
        return new query_1.default({ schema: this, attributes });
    }
    put(data) {
        const createArgsFromData = (data) => {
            let args = [];
            for (const [key, value] of Object.entries(this.attributes)) {
                if (!data.hasOwnProperty(key))
                    throw new TypeError(`Attribute ${key} is empty. You can't insert null data.`);
                args.push(data[key]);
            }
            return args;
        };
        if (this.tables.length === 0)
            throw new TypeError("Unable to put Schema without any queries.");
        if (this.tables.length === 1) {
            return new single_executable_1.default(insert_into_1.createInsertStatement(this.tables[0]), createArgsFromData(data));
        }
        return new batch_executable_1.default(this.tables.map(table => {
            return {
                query: insert_into_1.createInsertStatement(table),
                params: createArgsFromData(data)
            };
        }));
    }
}
exports.default = Schema;
