"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Where = exports.getEqualConstraints = void 0;
const select_1 = require("./cql-generators/select");
const schema_utils_1 = require("./schema-utils");
class Query {
    constructor({ table, schema, attributes }) {
        if (!table && !schema)
            throw new TypeError("You cannot create a query without a table or schema. Please specify atleast one.");
        this.table = table;
        this.schema = schema;
        this.constraints = [];
        this.attributes = attributes;
    }
    where(attribute) {
        return new Where(this, attribute);
    }
    ;
    and(attribute) {
        return new Where(this, attribute);
    }
    ;
    addConstraint(constraint) {
        this.constraints.push(constraint);
    }
    getTable() {
        // if we do not have table specified, that means that we have a schema specified
        // therefore we will use an algorithm to get 
        if (!this.table) {
            return schema_utils_1.getTableFromSchema(exports.getEqualConstraints(this.constraints).map((constraint) => constraint.subject), this.constraints.map(constraint => constraint.subject), this.schema);
        }
        return this.table;
    }
    getQuery() {
        return select_1.generateSelectQuery({ table: this.getTable(), attributes: this.attributes, constraints: this.constraints });
    }
    execute(client) {
        const { query, params } = this.getQuery();
        return client.execute(query, params, { prepare: true });
    }
}
exports.default = Query;
const getEqualConstraints = (constraints) => constraints.filter(constraint => constraint.operator === Where.EQUALS);
exports.getEqualConstraints = getEqualConstraints;
class Where {
    constructor(query, attribute) {
        this.query = query;
        this.attribute = attribute;
    }
    equals(value) {
        this.query.addConstraint({ subject: this.attribute, operator: Where.EQUALS, value: value });
        return this.query;
    }
    isGreaterThan(value) {
        this.query.addConstraint({ subject: this.attribute, operator: Where.IS_GREATER_THAN, value: value });
        return this.query;
    }
    isGreaterThanOrEqualTo(value) {
        this.query.addConstraint({ subject: this.attribute, operator: Where.IS_GREATER_THAN_OR_EQUAL_TO, value: value });
        return this.query;
    }
    isLesserThan(value) {
        this.query.addConstraint({ subject: this.attribute, operator: Where.IS_LESSER_THAN, value: value });
        return this.query;
    }
    isLesserThanOrEqualTo(value) {
        this.query.addConstraint({ subject: this.attribute, operator: Where.IS_LESSER_THAN_OR_EQUAL_TO, value: value });
        return this.query;
    }
}
exports.Where = Where;
Where.EQUALS = "=";
Where.IS_GREATER_THAN = ">";
Where.IS_GREATER_THAN_OR_EQUAL_TO = ">=";
Where.IS_LESSER_THAN = "<";
Where.IS_LESSER_THAN_OR_EQUAL_TO = "<=";
