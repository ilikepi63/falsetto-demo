"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSelectQuery = exports.whereStatement = exports.getWhereFromConstraints = exports.getResultantConstraint = exports.stringFromAttributes = exports.generateAttributes = exports.AND = exports.WHERE = exports.FROM = exports.SELECT = void 0;
const utils_1 = require("../utils");
const utils_2 = require("./utils");
exports.SELECT = "SELECT";
exports.FROM = "FROM";
exports.WHERE = "WHERE";
exports.AND = "AND";
;
const generateAttributes = (arr) => arr.join(", ");
exports.generateAttributes = generateAttributes;
const stringFromAttributes = (arr) => {
    // the idea is that you do not get 
    if (arr === null || arr === undefined) {
        return "*";
    }
    return exports.generateAttributes(arr);
};
exports.stringFromAttributes = stringFromAttributes;
const getResultantConstraint = (constraint) => {
    if (utils_1.isString(constraint.subject) && utils_1.isString(constraint.operator) && utils_1.isString(constraint.value)) {
        return `${constraint.subject} ${constraint.operator} ?`;
    }
    if (utils_1.isString(constraint.subject) && utils_1.isString(constraint.value)) {
        return `${constraint.subject} = ?`;
    }
    throw new TypeError(`Malformed Input when constructing a IConstraint object. Given: ${constraint}.`);
};
exports.getResultantConstraint = getResultantConstraint;
const getWhereFromConstraints = (constraints) => {
    let query = " ";
    let params = [];
    for (let i = 0; i < constraints.length; i++) {
        params.push(constraints[i].value);
        if (i === 0) {
            query = query + `${exports.WHERE} ${exports.getResultantConstraint(constraints[i])}`;
        }
        else {
            query = query + ` ${exports.AND} ${exports.getResultantConstraint(constraints[i])}`;
        }
    }
    return {
        query,
        params
    };
};
exports.getWhereFromConstraints = getWhereFromConstraints;
const whereStatement = (constraints) => {
    if (!constraints)
        return { query: "", params: [] };
    if (constraints.length < 1)
        return { query: "", params: [] };
    return exports.getWhereFromConstraints(constraints);
};
exports.whereStatement = whereStatement;
const generateSelectQuery = ({ table, attributes, constraints }) => {
    const { params, query } = exports.whereStatement(constraints);
    return {
        params,
        query: `${exports.SELECT} ${exports.stringFromAttributes(attributes)} ${exports.FROM} ${utils_2.createNameFromQuery(table)}${query};`
    };
};
exports.generateSelectQuery = generateSelectQuery;
