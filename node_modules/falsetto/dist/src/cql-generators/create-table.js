"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClusteringOrder = exports.createClusteringColumn = exports.createPartitionKey = exports.createClusteringKey = exports.createPrimaryKey = exports.attributesFromQuery = exports.typeFromAttributeEntry = exports.createTable = void 0;
const utils_1 = require("./utils");
// constants 
const CREATE_TABLE = "CREATE TABLE";
const PRIMARY_KEY = "PRIMARY KEY";
const WITH_CLUSTERING_ORDER_BY = "WITH CLUSTERING ORDER BY";
const createTable = (query) => `${CREATE_TABLE} ${utils_1.createNameFromQuery(query)} ${utils_1.parenthesis(`\n${exports.attributesFromQuery(query)},\n${exports.createPrimaryKey(query)}\n`)} ${exports.createClusteringOrder(query.clusteringColumns)};`;
exports.createTable = createTable;
const typeFromAttributeEntry = (attribute) => `${attribute.name} ${attribute.type}`;
exports.typeFromAttributeEntry = typeFromAttributeEntry;
const attributesFromQuery = (query) => Object.entries(query.schema.attributes).map(([, attribute]) => exports.typeFromAttributeEntry(attribute)).join(",\n");
exports.attributesFromQuery = attributesFromQuery;
const createPrimaryKey = (query) => {
    if (query.partitionKey.length < 1)
        throw new TypeError("You cannot create a table with no primary key.");
    if (query.clusteringColumns.length === 0) {
        return `${PRIMARY_KEY} ${utils_1.parenthesis(`${exports.createPartitionKey(query.partitionKey.map(pkey => pkey.name))}`)}`;
    }
    const clusteringKey = exports.createClusteringKey(query.clusteringColumns.map(ckey => ckey.name));
    return `${PRIMARY_KEY} ${utils_1.parenthesis(`${exports.createPartitionKey(query.partitionKey.map(pkey => pkey.name))}, ${clusteringKey}`)}`;
};
exports.createPrimaryKey = createPrimaryKey;
const createClusteringKey = (keys) => keys.join(", ");
exports.createClusteringKey = createClusteringKey;
const createPartitionKey = (keys) => utils_1.parenthesis(keys.join(", "));
exports.createPartitionKey = createPartitionKey;
const createClusteringColumn = (clusteringColumn) => `${clusteringColumn.name} ${clusteringColumn.direction}`;
exports.createClusteringColumn = createClusteringColumn;
const createClusteringOrder = (clusteringKeys) => clusteringKeys.length > 0 ? `${WITH_CLUSTERING_ORDER_BY} ${utils_1.parenthesis(clusteringKeys.map(col => exports.createClusteringColumn(col)).join(" "))}` : "";
exports.createClusteringOrder = createClusteringOrder;
