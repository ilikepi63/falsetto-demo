"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_table_1 = require("./cql-generators/create-table");
const query_1 = __importDefault(require("./query"));
class Table {
    constructor(schema) {
        this.partitionKey = [];
        this.clusteringColumns = [];
        this.schema = schema;
        // check the environment variable when attaching this to a global function
        if (process.env.GENERATE_TABLES) {
            // add the query to the global query object
        }
    }
    static from(schema) {
        // create a new query instance
        const query = new Table(schema);
        // add the query to the schema instance
        schema.addTable(query);
        // return the instance of this query
        return query;
    }
    by(attr) {
        /// TODO: ensure that attributes are part of the actual schema
        if (Array.isArray(attr)) {
            for (let i = 0; i < attr.length; i++) {
                this.partitionKey.push(attr[i]);
            }
        }
        else {
            this.partitionKey.push(attr);
        }
        return this;
    }
    orderBy(clusteringColumns) {
        this.clusteringColumns = clusteringColumns;
        return this;
    }
    createTable() {
        return create_table_1.createTable(this);
    }
    get(attributes) {
        return new query_1.default({ table: this, attributes });
    }
}
exports.default = Table;
