import Executable from "./executables/executable";
import { Client, types } from "cassandra-driver";
import { IConstraint } from "./cql-generators/select";
import { Schema, Table } from ".";
interface IQueryConstructor {
    table?: Table;
    schema?: Schema;
    attributes?: Array<string>;
}
export default class Query implements Executable {
    constraints: Array<IConstraint>;
    attributes?: Array<string>;
    table?: Table;
    schema?: Schema;
    constructor({ table, schema, attributes }: IQueryConstructor);
    where(attribute: string): Where;
    and(attribute: string): Where;
    addConstraint(constraint: IConstraint): void;
    getTable(): Table;
    getQuery(): import("./cql-generators/select").ISelectStatement;
    execute(client: Client): Promise<types.ResultSet>;
}
export declare const getEqualConstraints: (constraints: Array<IConstraint>) => Array<IConstraint>;
export declare class Where {
    static EQUALS: string;
    static IS_GREATER_THAN: string;
    static IS_GREATER_THAN_OR_EQUAL_TO: string;
    static IS_LESSER_THAN: string;
    static IS_LESSER_THAN_OR_EQUAL_TO: string;
    query: Query;
    attribute: string;
    constructor(query: Query, attribute: string);
    equals(value: unknown): Query;
    isGreaterThan(value: unknown): Query;
    isGreaterThanOrEqualTo(value: unknown): Query;
    isLesserThan(value: unknown): Query;
    isLesserThanOrEqualTo(value: unknown): Query;
}
export {};
